# To use this simulator the xtlib-adapter simulator must be running, start the script xtlib-adapter/xtadapter/server_sim.py
ENZEL-Sim: {
    class: Microscope,
    role: enzel,
    children: [
        "Sample Thermostat", "Cooler Controller",
        "SEM E-beam Full", "SEM Detector Full",
        "XT E-beam Focus", "FIB Detector",
        "Light Source", "Filter Wheel", "Stigmator",
        "Camera", "Optical Objective",
        "5DOF Stage", "Stage Global",
        "Objective Aligner", "Optical Focus",
    ],
}

# Lakeshore 335, which controls the temperature
"Sample Thermostat": {
    class: lakeshore.Lakeshore,
    role: sample-thermostat,
    init: {
        port: "/dev/fake",  # For simulator
        sensor_input: "B",
        output_channel: 2,
    },
}

# Cyrolab
"Cooler Controller": {
    # No simulator for Cyrolab, so using lakeshore one
    class: lakeshore.Lakeshore,
    role: cooler,
    init: {
        port: "/dev/fake",  # For simulator
        sensor_input: "B",
        output_channel: 1,
    },
}

# Merges the scan interface e-beam and the e-beam control (via API)
"SEM E-beam Full": {
    class: scanner.CompositedScanner,
    role: e-beam,
    init: {},
    children: {"detector": "SEM Detector Full"},
    dependencies: {
        external: "SEM E-beam",
        internal: "XT E-beam Control"
    },
    properties: {
        scale: [8, 8],#  (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
    },
    affects: ["SEM Detector Full", "Camera"], # affects the CCD in case of cathodoluminescence
}

# Merges the analog and digital detectors (xt_client one and the one from the DAQ board)
"SEM Detector Full": {
    role: se-detector,
    init: {},
    dependencies: {
        external: "SEM Detector",
    },
}

# Analog connection to the SEM, using a DAQ board, for controlling the beam position and receiving the ETD signal.
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    },
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channels: [1, 0],
        # On Delmic scanning box v2, the voltage is x2, so need to specify twice smaller values than needed.
        #max_res: [4096, 4096], # px
        limits: [[2.2, -2.2], [2.22, -2.22]],  # V
        park: [-2, -2], # V
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 0.8e-6, # s
        hfw_nomag: 0.28, # m, must be the same as in XT E-beam Control, 20211215: 0.2293
    },
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channel: 1,
        limits: [-3, 3], # V
    },
}

# Fake SEM connection
"SEM XT connection": {
    class: xt_client.SEM,
    role: null,
    init: {
      address: "PYRO:Microscope@0.0.0.0:4242",
    },
    children: {
        scanner: "XT E-beam Control",
        fib-scanner: "Fib Scanner",
        focus: "XT E-beam Focus",
        detector: "FIB Detector",
    },
}

"Fib Scanner": {
    # Internal child of "SEM XT connection", so no class
    role: ion-beam,
    init: {
      #        hfw_nomag: 0.2293,  # Must be the same as in SEM E-beam
    },
}

"XT E-beam Control": {
    # Internal child of "SEM XT connection", so no class
    role:  null,
    init: {
      hfw_nomag: 0.2293,  # Must be the same as in SEM E-bea
    },
}

"FIB Detector": {
  role: se-detector-ion,
}

"XT E-beam Focus": {
    # Internal child of "SEM XT connection", so no class
    role: ebeam-focus,
    affects: ["SEM Detector Full"],
}

"Light Source": {
    class: lle.FakeLLE,
    role: light,
    affects: ["Camera"],
    init: {
        port: "/dev/ttyUSB*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
        sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
                  "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
                  "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
                  "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
                 }
        },
        # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    affects: ["Camera"],
    init: {
        mag: 100.0, # ratio, (actually of the complete light path)
        na: 0.85, # ratio, numerical aperture
        ri: 1.0, # ratio, refractive index
    },
}

# Controller for the filter-wheel + stigmator
# DIP must be configured with address 7 (= 0000111)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["fw", "stig"],
        ustepsize: [12.27184e-6, 414.499e-6], # rad/Âµstep (adjusted for the simulator to go fast)
        rng: [[-7, 14], [-7, 14]], # rad
        unit: ["rad", "rad"],
        refproc: "Standard",
        refswitch: {"fw": 0, "stig": 0},
#       inverted: ["stig"],  # to make positive moves go the opposite direction
    },
}

"Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: filter,
    affects: ["Camera"],
    dependencies: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # TODO: a way to indicate the best filter to use during alignment?
        # It supports 4 filters
        positions: {
          # pos (rad) -> m,m
          3.488111735: [300.e-9, 700.e-9], # no filter
          4.040437151: [420.e-9, 460.e-9], # FF01-440/40-25
          4.686208974: [510.e-9, 540.e-9], # FF01-525/30-25
          5.471607137: [589.e-9, 625.e-9], # FF01-607/36-25
          6.117378960: [672.e-9, 696.e-9], # FF02-684/24-25
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
}

"Stigmator": {
    class: actuator.RotationActuator,
    role: stigmator,
    affects: ["Camera"],
    children: {"rz": "Optical Actuators"},
    init: {
        axis_name: "stig",
        cycle: 6.283185, # rad
        # ref_start: null, # rad, value to where start the referencing, default is to start at 5% of cycle
        ref_frequency: null, # Disable auto referencing. Use a number (eg 5) to automatically refence after N moves
    },
    metadata: {
        POS_COR: 0.0  # rad, adjustment needed for 0 = no astigmatism
        # Add CALIB for Z localization calibration: stigmator angle -> calibration
    },
}

"Camera": {
    class: simcam.Camera,
    role: ccd,
    init: {
      image: "songbird-sim-ccd.h5",
      max_res: [260, 348], # 4x4 tiles
    },
    properties: {
        exposureTime: 0.3, # s
    },
    metadata: {
      # To change what the "good" focus position is on the simulator
      # It's needed for not using the initial value, which isn't an active position.
      FAV_POS_ACTIVE: {'z': 0.002},  # focus position at init
    },
}
"Optical Focus": {
  class: actuator.MultiplexActuator,
  role: focus,
  dependencies: { "z": "5DOF Stage" },
  affects: [ "Camera" ],
  init: {
    axes_map: { "z": "z" },
  },
  metadata: {
    FAV_POS_ACTIVE: { 'z': 0.002 }
  },
  persistent: {
    metadata: [ FAV_POS_ACTIVE ],  # Store "good focus" position between run
  },
}

# Special component to only provide the X/Y axis of the optical lens to align it with the e-beam lens
"Objective Aligner": {
  class: actuator.MultiplexActuator,
  role: align,
  affects: [ "Camera" ],
  dependencies: { "x": "3DOF Stage", "y": "Tilted 3DOF YZ", "z": "Tilted 3DOF YZ" },
  init: {
    axes_map: { "x": "x", "y": "x", "z": "y" },
  },
  metadata: {
    # Default position at init corresponding to (approximately) aligned
    # It must have both x,y and z.
    FAV_POS_ACTIVE: { 'x': 0.001190970565, 'y': 0.000655087788, 'z': 0.002 },
    FAV_POS_ALIGN: { 'x': 0.001190970565, 'y': 0.000655087788, 'z': 0.001 },
    # "Safe" position to go to so that the 5DoF stage cannot hit the objective lens.
    # It must have both x and y. It should be at least 0.1 mm away from ACTIVE
    # Note: most like, these values should be the same as for 3DOF Stage.
    FAV_POS_DEACTIVE: { 'x': -0.0080, 'y': -0.007, 'z': -6.e-3 },  # Helios 20210201
  },
  persistent: {
    metadata: [FAV_POS_ACTIVE],
  },
}
# Special component to provide control of the 5DOF in a global reference frame (works only with rx = 28 degrees)
"Stage Global": {
  class: actuator.MultiplexActuator,
  role: stage-global,
  affects: [ "Camera", "SEM E-beam Full" ],
  dependencies: { "x": "5DOF Stage", "y": "Stage YZ Global", "z": "Stage YZ Global" },
  init: {
      axes_map: { "x": "x", "y": "x", "z": "y" },
  }
}

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they have opposite direction than convention
# (so the stage "position" is the current position observed)
"5DOF Stage": {
  class: smaract.MC_5DOF,
  role: stage,
  affects: [ "Camera", "SEM E-beam Full" ],
  init: {
    locator: "fake",
    ref_on_init: False, # TODO: needs to happen *after* the optical stage has been referenced and moved down
    hold_time: 1,  # s, default = infinite (.inf)
    settle_time: 1,  # s, extra time for the sample to stop vibrating after movement
    linear_speed: 0.002,  # m/s
    rotary_speed: 0.087,  # rad/s = 5 deg/s
    pos_deactive_after_ref: False,  # Set to True to automatically go to DEACTIVE position after successful referencing
    axes: {
      'x': {
        range: [-1.6e-2, 1.6e-2],
        unit: 'm',
      },
      'y': {
        range: [-1.5e-2, 1.5e-2],
        unit: 'm',
      },
      'z': {
        range: [-1.e-2, 0.0025],
        unit: 'm',
      },
      'rx': {
        range: [-0.49, 0.49],
        unit: 'rad',
      },
      'rz': {
        range: [-0.49, 0.49],
        unit: 'rad',
      },
    },
  },
  metadata: {
    # Center of rotation for rx, so that tilting the stage shows the same center in FIB and SEM/FM.
    # Note that the origin is arbitrarily hard-coded in the controller.
    # Current values are correct for Helios FIB SEM
    # Allowed range when in FM/SEM imaging mode. The X/Y ranges are also used
    # as default area for the overview acquisition.
    POS_ACTIVE_RANGE: { 'x': [ -0.003, 0.003 ], 'y': [ -0.003, 0.003 ], 'z': [ -0.003, 0.002 ], } ,
    # Initial position when going to FM/SEM imaging.
    # It should be within the ACTIVE_RANGE
    FAV_POS_ACTIVE: {'x': 0.0015,  'y': -0.00159,  'z': 0.00175, 'rx': -0.4735,  'rz': -0.01745},
    # Loading position
    FAV_POS_DEACTIVE: { 'x': 0.01500, 'y': 0.000163, 'z': 0.00059618, 'rx': 0.0, 'rz': 0.0 },
    # GIS coating position
    FAV_POS_COATING: { 'x': 0.001, 'y': -0.0012, 'z': -0.001, 'rx': 0.348, 'rz': -0.00628953565 },
    FAV_POS_ALIGN: {'x': 0.0016,  'y': -0.00159,  'z': 0.00175, 'rx': -0.4735,  'rz': -0.01745},
    # SEM Imaging position
    FAV_POS_SEM_IMAGING: { 'rx': 0, 'rz': 0, 'x': 0.000155140624,  'y': -0.002652449291,  'z': 0.001037265119, },
    ION_BEAM_TO_SAMPLE_ANGLE: -0.6632, # rad, 38Â°
    # Angle of the ion-beam with the sample (when rx = 0Â°)
    # Used to compute the milling angle: milling angle = ION_BEAM_TO_SAMPLE_ANGLE - rx
    # TODO: check the value, and uncomment once Odemis supports this metadata
    #ION_BEAM_TO_SAMPLE_ANGLE: 0.6632 # rad, 38Â°
    PIVOT_POS: {
      # Default values:
      'x': -0.10, # X has no effect, but the controller wants a value
      'y': -0.007370275587860,
      'z': 0.039136292,
    },
  },
  persistent: {
    metadata: [ FAV_POS_ACTIVE ],
  },
}

# Provides control of the stage in a global reference frame for the axis Y and Z when the stage is tilted
"Stage YZ Global": {
  class: actuator.ConvertStage,
  role: null,
  dependencies: {
    "under": "5DOF Stage"
  },
  init: {
    axes: [ "y", "z" ], # name of the axes in the dependency, mapped to x,y (if identity transformation)
    # TODO: Check the correct angle sign
    rotation: 0.4887, # rad , 28Â°
  },
}

"Tilted 3DOF YZ":  {
    class: actuator.ConvertStage,
    role: null,
    dependencies: {
        "under": "3DOF Stage"
    },
    init: {
        axes: [ "y", "z" ], # name of the axes in the dependency, mapped to x,y (if identity transformation)
        rotation: -0.4887, # rad , -28Â°
    },
    affects: [ "Camera" ],
}

"3DOF Stage": {
  class: smaract.MCS2,
  role: null,
  init: {
    locator: "fake",
    ref_on_init: True,
    speed: 0.003,  # m/s
    accel: 0.003,  # m/sÂ²
    hold_time: 1,  # s, default = infinite (.inf)
    axes: {
      'x': {
        range: [ -0.0114001, 0.0112466 ],
        unit: 'm',
        channel: 0,
      },
      'y': {
        range: [ -0.0111003, 0.0111334 ],
        unit: 'm',
        channel: 2,
      },
      'z': {
        # When Z is inverted, the range will be inverted too, as this describes the
        # range as seen by the device. IOW, expect to read the opposite values when
        # using odemis --list-prop.
        range: [ -0.0126437, 0.009],
        unit: 'm',
        channel: 1,
      },
    },
    inverted: [ "z" ],
  },
}
